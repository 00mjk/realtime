ALTER SYSTEM SET wal_level='logical';
ALTER SYSTEM SET max_wal_senders='10';
ALTER SYSTEM SET max_replication_slots='10';


-- Tables for testing

CREATE TYPE public.user_status AS ENUM ('ACTIVE', 'INACTIVE');
CREATE TABLE public.users (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name text,
  last_name text,
  info jsonb,
  user_status public.user_status DEFAULT 'ACTIVE' :: public.user_status, 
  inserted_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);
INSERT INTO 
    public.users (first_name, last_name) 
VALUES 
    ('Joe', 'Blogs'),
    ('Jane', 'Doe');

CREATE TABLE public.todos (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  details text,
  user_id bigint REFERENCES users NOT NULL
);
INSERT INTO 
    public.todos (details, user_id) 
VALUES 
    ('Add Realtime', 1),
    ('Subscribe to Supabase', 2);

-- Function for broadcasts
CREATE FUNCTION public.broadcast_changes() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
      DECLARE
        current_row RECORD;
      BEGIN
        IF (TG_OP = 'INSERT' OR TG_OP = 'UPDATE') THEN
          current_row := NEW;
        ELSE
          current_row := OLD;
        END IF;
        IF (TG_OP = 'INSERT') THEN
          OLD := NEW;
        END IF;
      PERFORM pg_notify(
          'test_notify',
          json_build_object(
            'table', TG_TABLE_NAME,
            'type', TG_OP,
            'id', current_row.id,
            'new_row_data', row_to_json(NEW),
            'old_row_data', row_to_json(OLD)
          )::text
        );
      RETURN current_row;
      END;
      $$;



-- Create the Replication publication 
CREATE PUBLICATION supabase_realtime FOR ALL TABLES;
